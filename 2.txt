1                       数组排序和添加成员
public class Test {
    public static void main(String[] args)
    {
        StudentClass sClass = new StudentClass();
        sClass.createClass();

        System.out.println("Original Order:");
        System.out.println(sClass.output());

        sClass.sort();

        System.out.println("Sorted Order:");
        System.out.println(sClass.output());

        sClass.add(new Student("Sharon",18,80));

        System.out.println("Original Order after Adding:");
        System.out.println(sClass.output());

        sClass.sort();

        System.out.println("Sorted Order after Adding:");
        System.out.println(sClass.output());
    }
}
class Student{
    private String name;
    private  int age;
    private double grade;
    public Student(String name,int age,double grade){
        this.name=name;
        this.age=age;
        this.grade=grade;
    }
    String getName(){
        return name;
    }
    int getAge(){
        return age;
    }
    double getGrade(){
        return grade;
    }
}
class StudentClass{
    private Student stus[];
    private int size;
    public StudentClass(){
        size =0;
        stus=null;
    }
    public void createClass(){
        String names[] = {"Tom","Jerry","Snoopy","Mary","Rose"};
        double grades[] = {67,78.5,98,76.5,90};
        int ages[] = {17,18,18,19,17};
        size=names.length;
        stus=new Student[size];
        for (int i=0;i<size;i++) {
            stus[i] = new Student(names[i], ages[i], grades[i]);
        }
    }
    public void sort(){
        Student t;
        for (int i=0;i<size-1;i++) {
            for (int j=0;j<size-i-1;j++){
                if (stus[j].getGrade()<stus[j+1].getGrade()){
                    t=stus[j];
                    stus[j]=stus[j+1];
                    stus[j+1]=t;
                }
            }
        }
    }
    public String output(){
        StringBuilder info=new StringBuilder();
        for (int i=0;i<size;i++) {
            info.append("Name: " +stus[i].getName()+"\tGrade: " + stus[i].getGrade() + "\r\n");
        }
        info.append("total: "+size+" students\n");
        return info.toString();
    }
    public void add(Student student){
        Student newstus[]=new Student[size+1];
        for (int i=0;i<size;i++){
            newstus[i]=stus[i];
        }
        newstus[size]=student;
        stus=newstus;
        size++;
    }
}
2                 list排序编程1
import java.util.AbstractList;
import java.util.ArrayList;
import java.util.List;

public class Test1 {
    public static void main(String[] args)
    {
        StudentClass sClass = new StudentClass();
        sClass.createClass();
        System.out.println("Original Order:");
        System.out.println(sClass.output());
        sClass.sort();
        System.out.println("Sorted Order:");
        System.out.println(sClass.output());
    }
}
class Student{
    private String name;
    private  int age;
    private double grade;
    public Student(String name,int age,double grade){
        this.name=name;
        this.age=age;
        this.grade=grade;
    }
    String getName(){
        return name;
    }
    int getAge(){
        return age;
    }
    double getGrade(){
        return grade;
    }
}
class StudentClass{
    private List<Student> studentList;
    private int size;
    public StudentClass(){
        size =0;
        studentList=null;
    }
    public void createClass(){
        String names[] = {"Tom","Jerry","Snoopy","Mary","Rose"};
        double grades[] = {67,78.5,98,76.5,90};
        int ages[] = {17,18,18,19,17};
        size=names.length;
        studentList=new ArrayList<Student>();
        Student temp;
        for (int i=0;i<size;i++) {
            temp = new Student(names[i], ages[i], grades[i]);
            studentList.add(temp);
        }
    }
    public void sort(){
        Student t;
        for (int i=0;i<size-1;i++) {
            for (int j=0;j<size-i-1;j++){
                if (studentList.get(j).getGrade()<studentList.get(j+1).getGrade()){
                    t=studentList.get(j);
                    studentList.set(j,studentList.get(j+1));
                    studentList.set(j+1,t);
                }
            }
        }
    }
    public String output(){
        StringBuilder info=new StringBuilder();
       for(Student stu:studentList){
           info.append("Name: "+stu.getName()+"\tGrade: "+stu.getGrade()+"\t\n");
       }
       info.append("total: "+size+" students");
        return info.toString();
    }
}
3                 list排序编程2
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;
import java.util.Comparator;
public class Test2 {
    public static void main(String[] args)
    {
        StudentClass sClass = new StudentClass();
        sClass.createClass();
        System.out.println("Original Order:");
        System.out.println(sClass.output());
        sClass.sort();
        System.out.println("Sorted Order:");
        System.out.println(sClass.output());
    }
}
class Student implements Comparable<Student> {
    private String name;
    private int age;
    private double grade;
    public Student(String name, int age, double grade) {
        this.name = name;
        this.age = age;
        this.grade = grade;
    }
    public String getName() {
        return name;
    }
    public int getAge() {
        return age;
    }
    public double getGrade() {
        return grade;
    }
    public int compareTo(Student other) {
        return Double.compare(this.grade, other.grade); 
    }
}
class StudentClass {
    private List<Student> stuList;
    private int size;
    public StudentClass() {
        size = 0;
        stuList = new ArrayList<>();
    }
    public void createClass() {
        String[] names = {"Tom", "Jerry", "Snoopy", "Mary", "Rose"};
        double[] grades = {67, 78.5, 98, 76.5, 90};
        int[] ages = {17, 18, 18, 19, 17};
        stuList.clear(); 
        size = names.length;
        for (int i = 0; i < size; i++) {
            stuList.add(new Student(names[i], ages[i], grades[i]));
        }
    }
    public void sort() {
        Collections.sort(stuList); 
    }
    public String output() {
        StringBuilder info = new StringBuilder();
        for (Student stu : stuList) {
            info.append("Name: ").append(stu.getName())
                    .append("\tGrade: ").append(String.format("%.1f", stu.getGrade()))
                    .append("\r\n");
        }
        info.append("total: ").append(size).append(" students\n");
        return info.toString();
    }
}
4                  list排序编程3
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class Test3 {
    public static void main(String[] args)
    {
        StudentClass sClass = new StudentClass();
        sClass.createClass();
        System.out.println("Original Order:");
        System.out.println(sClass.output());
        sClass.sort();
        System.out.println("Sorted Order:");
        System.out.println(sClass.output());
    }
}
class Student {
    private String name;
    private int age;
    private double grade;
    public Student(String name, int age, double grade) {
        this.name = name;
        this.age = age;
        this.grade = grade;
    }
    public String getName() {
        return name;
    }
    public int getAge() {
        return age;
    }
    public double getGrade() {
        return grade;
    }
}
class StudentClass {
    private List<Student> stuList;
    private int size;
    public StudentClass() {
        size = 0;
        stuList = new ArrayList<>();
    }
    public void createClass() {
        String[] names = {"Tom", "Jerry", "Snoopy", "Mary", "Rose"};
        double[] grades = {67, 78.5, 98, 76.5, 90};
        int[] ages = {17, 18, 18, 19, 17};
        size = names.length;
        for (int i = 0; i < size; i++) {
            stuList.add(new Student(names[i], ages[i], grades[i]));
        }
    }
    public void sort() {
        Collections.sort(stuList, new Comparator<Student>() {
            public int compare(Student s1, Student s2) {
                int agecompare=Integer.compare(s1.getAge(),s2.getAge());
                if (agecompare!=0){
                    return agecompare;
                }
                return s1.getName().compareTo(s2.getName());
            }
        });
    }
    public String output(){
        StringBuilder info=new StringBuilder();
        for(Student stu:stuList){
            info.append("Age: "+stu.getAge()+"\tName: "+stu.getName()+"\t\n");
        }
        info.append("total: "+size+" students");
        return info.toString();
    }
}
5                     treeset排序程序
import java.util.Set;
import java.util.TreeSet;
public class Test4 {
    public static void main(String[] args)
    {
        StudentClass sClass = new StudentClass();
        sClass.createClass();
        System.out.println("Original Order:");
        System.out.println(sClass.output());
    }
}
class Student implements Comparable<Student>{
    private String name;
    private int age;
    private double grade;
    public Student(String name, int age, double grade) {
        this.name = name;
        this.age = age;
        this.grade = grade;
    }
    public String getName() {
        return name;
    }
    public int getAge() {
        return age;
    }
    public double getGrade() {
        return grade;
    }
    public int compareTo(Student student){
        double g1,g2;
        g1=this.getGrade();
        g2=student.getGrade();
        if (g1>g2){
            return -1;
        }
        else if (g1<g2){
            return 1;
        }
        else {
            return 0;
        }
    }
}
class StudentClass{
    private Set<Student> stuset;
    private int size;
    public StudentClass(){
        size=0;
        stuset=null;
    }
    public void createClass(){
        String[] names = {"Tom", "Jerry", "Snoopy", "Mary", "Rose"};
        double[] grades = {67, 78.5, 98, 76.5, 90};
        int[] ages = {17, 18, 18, 19, 17};
        size=names.length;
        stuset=new TreeSet<Student>();
        Student t;
        for (int i=0;i<size;i++){
            t=new Student(names[i],ages[i],grades[i]);
            stuset.add(t);
        }
    }
    public String output(){
        StringBuilder info=new StringBuilder();
        for(Student stu:stuset){
            info.append("Name: "+stu.getName()+"\tGrade: "+stu.getGrade()+"\t\n");
        }
        info.append("total: "+size+" students");
        return info.toString();
    }
}


1                 类的继承
public class Main {
    public static void main(String[] args) {
        Student st=new Student(20,"zhangsan");
        st.show();
        Undergraduate st1=new Undergraduate(21,"lisi","math");
        st1.show();
        }
}
class Student{
    protected int age;
     private String  name;
    public Student(int age,String name){
        this.age=age;
        this.name=name;
    }
    void show()
    {
        System.out.println("information:");
        System.out.println("name="+this.name);
        System.out.println("age="+this.age);
    }
}
class Undergraduate extends Student{
    private String major;
    public Undergraduate(int age, String name ,String major) {
        super(age, name);
        this.major=major;
    }
    void show(){
        super.show();
        System.out.println("major="+this.major);
    }
}
2                 类的继承-温度类
public class Test{
    public static void main(String [] args){
        Temperature t = new Temperature(24);
        t.display();
        Celsius c = new Celsius(24);
        c.display();
        Fahrenheit f = new Fahrenheit(56);
        f.display();
    }
}
class Temperature{
    double t;
    public Temperature(double t){
        this.t=t;
    }
    void display()
    {
        System.out.println("temperature="+t);
    }
}
class Celsius extends Temperature{ ;
    public Celsius(double a){
        super(a);
    }
    void display()
    {
        System.out.println("C temperature="+t);
    }
}
class Fahrenheit extends Temperature{
    public Fahrenheit(double b){
        super(b);
    }
    void display()
    {
        System.out.println("F temperature="+t);
    }
}
3                    类的继承-日期类
import java.util.Date;
import java.util.TimeZone;
import java.text.SimpleDateFormat;
public class Test1{
    public static void main(String [] args){
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy MM dd");
        sdf.setTimeZone(TimeZone.getTimeZone("GMT+8"));
        MyDate dt = new MyDate(1577808000000L);
        String dtStr = sdf.format(dt);
        System.out.println(dtStr);
        MyDate md = dt.addDays(100);
        String mdStr = sdf.format(md);
        System.out.println(mdStr);
        int days = dt.getDays(md);
        System.out.print(mdStr + " - "+ dtStr +": ");
        System.out.println(days+"days");
    }
}
class MyDate extends Date{
    public MyDate(long date){
        super(date);
    }
    public long mm=24*60*60*1000L;
    public MyDate addDays(int days){
        long nowtime=this.getTime()+days*mm;
        return new MyDate(nowtime);
    }
    public int getDays(MyDate dt){
        long cha=dt.getTime()-this.getTime();
        return (int) (cha/mm);
    }
}


（1）                 点类
public class Test{
    public static void main(String[] args)     {
        MyPoint p1 = new MyPoint(40,0);
        MyPoint p2 = new MyPoint(0,30);
        MyPoint p3 = new MyPoint(0,0);
        int x1=20,y1=15;
        showPoint(p1,p2);
        System.out.println("distance: "+p1.getDistance(p2));
        p1.updatePoint(x1,y1);
        p2.updatePoint(p3);
        showPoint(p1,p2);
        System.out.println("distance: "+p2.getDistance(x1,y1));
    }
    private static void showPoint(MyPoint p1,MyPoint p2){
        System.out.println("--------------");
        System.out.println("p1: "+p1.getInfo());
        System.out.println("p2: "+p2.getInfo());
    }
}
class MyPoint{
    private double x;
    private double y;
    public MyPoint(double x,double y){
        this.x=x;
        this.y=y;
    }
    public  MyPoint(MyPoint point) {
        this.x=point.x;
        this.y=point.y;
    }
    public void display()
    {
        System.out.println("("+this.x+","+this.y+")");
    }
    public String getInfo(){
        return "("+this.x+","+this.y+")";
    }
    public void updatePoint(double x,double y){
        this.x=x;
        this.y=y;
    }
    public void updatePoint(MyPoint point){
        this.x= point.x;
        this.y= point.y;
    }
    public double getDistance(MyPoint point){
        return Math.sqrt(Math.pow(this.x-point.x,2)+Math.pow(this.y-point.y,2));
    }
    public double getDistance(double x,double y){
        return Math.sqrt(Math.pow(this.x-x,2)+Math.pow(this.y-y,2));
    }
}
（2）                 数学函数计算方法重载
import java.util.Scanner;
import java.math.*;
public class Test1 {
    public static void main(String[] args){
        int x, y, z;
        Scanner in = new Scanner(System.in);
        x = in.nextInt();
        y = in.nextInt();
        z = in.nextInt();
        in.close();
        int result;
        if (x < 0) {
            result = MyMath.f();
        } else if (x >= 0 && y < 0) {
            result = MyMath.f(x);
        } else if (x >= 0 && y >= 0 && z < 0) {
            result = MyMath.f(x, y);
        } else {
            result = MyMath.f(x, y, z);
        }
        System.out.println(result);
    }
}
class MyMath{
    public static int f(){
        return 0;
    }
    public static int f(int x){
        return (int)Math.pow(x,2);
    }
    public static int f(int x,int y){
        return (int)Math.pow(x,2)+(int)Math.pow(y,2);
    }
    public static int f(int x,int y,int z){
        return (int)Math.pow(x,2)+(int)Math.pow(y,2)+(int)Math.pow(z,2);
    }
}
（3）                     钱类方法重载和staic
import javax.print.DocFlavor;
public class Test2 {
    public static void main(String[] args){
        Money myMoney = new Money();
        Money yourMoney = new Money();
        Money hisMoney = new Money();
        Money herMoney = new Money();
        int amountInt=365;
        double amountDouble=254.686;
        String amountString="368.244";
        myMoney.set(amountInt);
        Money.writeOut("I",myMoney);
        yourMoney.set(amountDouble);
        Money.writeOut("You",yourMoney);
        hisMoney.set(amountString);
        Money.writeOut("He",hisMoney);
        herMoney.set(myMoney);
        Money.writeOut("She",herMoney);
        herMoney = yourMoney.times(3);
        Money.writeOut("She",herMoney);
        herMoney = yourMoney.add(hisMoney);
        Money.writeOut("She",herMoney);
        System.out.println("Remember: A penny saved is a penny earned.");
    }
}
class  Money{
    int yuan;
    int jiao;
    int fen;
    public Money(){
        this.yuan=0;
        this.jiao=0;
        this.fen=0;
    }
    public void set(int amountInt){
        this.yuan=amountInt;
        this.jiao=0;
        this.fen=0;
    }
    public void set(double amountDouble){
        int Fen=(int)Math.round(amountDouble*100);
        this.yuan=Fen/100;
        Fen=Fen%100;
        this.jiao=Fen/10;
        this.fen=Fen%10;
    }
    public void set(String amountString){
        double amount=Double.parseDouble(amountString);
        set(amount);
    }
    public void set(Money money){
        this.yuan=money.yuan;
        this.jiao=money.jiao;
        this.fen=money.fen;
    }
    public Money times(int n){
        Money result=new Money();
        int Fen=(this.yuan*100+this.jiao*10+this.fen)*n;
        result.yuan=Fen/100;
        Fen=Fen%100;
        result.jiao=Fen/10;
        result.fen=Fen%10;
        return  result;
    }
    public Money add(Money money){
        Money result=new Money();
        int total=(this.yuan*100+this.jiao*10+this.fen)+(money.yuan*100+money.jiao*10+money.fen);
        result.yuan=total/100;
        total=total%100;
        result.jiao=total/10;
        result.fen=total%10;
        return result;
    }
    public static void writeOut(String owner, Money money){
        System.out.println(owner+" have/has "+ money.yuan+" Yuan "+ money.jiao+" Jiao "+money.fen+" Fen.");
    }
}





1                   线圆相交
import java.rmi.MarshalledObject;
import static java.lang.Math.pow;
import static java.lang.Math.sqrt;
public class test1 {
    public static void main(String[] args) {
        double r = 50;
        MyPoint center = new MyPoint(100, 100);
        MyCircle circle = new MyCircle(center, r);
        LineSeg line1 = new LineSeg(new MyPoint(0, 100), new MyPoint(100, 200));
        LineSeg line2 = new LineSeg(new MyPoint(0, 0), new MyPoint(100, 100));
        line1.display();
        circle.display();
        System.out.println("line1&circle intersection: " + circle.intersection(line1));
        System.out.println("---------------------------");
        line2.display();
        circle.display();
        System.out.println("line2&circle intersection: " + circle.intersection(line2));
        System.out.println("---------------------------");
        while (circle.intersection(line2)) {
            circle.move(10, 10);
            circle.getCenter().display();
        }
        circle.display();
        System.out.println("line2&newCircle intersection: " + circle.intersection(line2));
        System.out.println("---------------------------");
    }
}
class MyPoint{
    double x;
    double y;
    public MyPoint(double x,double y){
        this.x=x;
        this.y=y;
    }
    public void display(){System.out.println(getInfo());}
    public String getInfo(){return "("+x+","+y+")" ;}
    public void move(double dx,double dy){
        x+=dx;
        y+=dy;
    }
    public double getDistance(MyPoint point){
        return Math.sqrt(pow(x-point.x,2)+pow(y-point.y,2));
    }
}
class LineSeg{
    MyPoint P1;
    MyPoint P2;
    LineSeg(MyPoint P1,MyPoint P2){
        this.P1=P1;
        this.P2=P2;
    }
    public boolean intersection(LineSeg p){
        if ((P1.y-P2.y)/(P1.x-P2.x)==(p.P1.y-p.P2.y)/(p.P1.x-p.P2.x))
            return true;
        else
            return false;
    }
    public void display(){
        System.out.println("("+P1.x+","+P1.y+")---("+P2.x+","+P2.y+")");
    }
    public double getDistance(MyPoint p){
        MyPoint a=P1;
        MyPoint b=P2;
        double dx=b.x-a.x;
        double dy=b.y-a.y;
        double lenSq=dx*dx+dy*dy;
        if (lenSq==0){
            return Math.sqrt(pow(p.x-a.x,2)+pow(p.y-a.y,2));
        }
        double t=((p.x-a.x)*dx+(p.y-a.y)*dy)/lenSq;
        t=Math.max(0,Math.min(1,t));
        double projX=a.x+t*dx;
        double projY=a.y+t*dy;
        return Math.sqrt(pow(p.x-projX,2)+pow(p.y-projY,2));
    }
}
class MyCircle{
    MyPoint point;
    double r;
    MyCircle(MyPoint point,double r){
        this.point=point;
        this.r=r;
    }
    public double getArea(){return 3.14*r*r;}
    public void display(){
        System.out.println("Circle Center:("+point.x+","+point.y+"),radius="+r+",Area="+getArea());
    }
    public boolean intersection(LineSeg line){
        if (line.getDistance(point)>r){
            return false;
        }
        return true;
    }
    public void move(double dx,double dy){
        point.x+=dx;
        point.y+=dy;
    }
    public MyPoint getCenter(){return point;}
}
2                         正方形内切圆
import static java.lang.Math.pow;

public class test2 {
    public static void main(String[] args) {
        double side = 100;
        MyPoint1 start = new MyPoint1(50,50);
        MySquare square = new MySquare(start, side);
        System.out.println("square info:");
        square.display();
        System.out.println("incirle of square info:");
        square.createCircle().display();

    }
}
class MySquare{
    MyPoint1 point;
    double length;
    MySquare(MyPoint1 point,double length){
        this.length=length;
        this.point=point;
    }
    public MyCircle1 createCircle(){
        MyPoint1 c_point=point;
        c_point.move(length/2,length/2);
        return new MyCircle1(c_point,length/2);
    }
    public void display(){System.out.println("start:("+point.x+","+point.y+"),side="+length);}
}
class MyPoint1{
    double x;
    double y;
    public MyPoint1(double x,double y){
        this.x=x;
        this.y=y;
    }
    public void display(){System.out.println(getInfo());}
    public String getInfo(){return "("+x+","+y+")" ;}
    public void move(double dx,double dy){
        x+=dx;
        y+=dy;
    }
    public double getDistance(MyPoint1 point){
        return Math.sqrt(pow(x-point.x,2)+pow(y-point.y,2));
    }
}
class LineSeg1{
    MyPoint1 P1;
    MyPoint1 P2;
    LineSeg1(MyPoint1 P1,MyPoint1 P2){
        this.P1=P1;
        this.P2=P2;
    }
    public boolean intersection(LineSeg1 p){
        if ((P1.y-P2.y)/(P1.x-P2.x)==(p.P1.y-p.P2.y)/(p.P1.x-p.P2.x))
            return true;
        else
            return false;
    }
    public void display(){
        System.out.println("("+P1.x+","+P1.y+")---("+P2.x+","+P2.y+")");
    }
    public double getDistance(MyPoint1 p){
        MyPoint1 a=P1;
        MyPoint1 b=P2;
        double dx=b.x-a.x;
        double dy=b.y-a.y;
        double lenSq=dx*dx+dy*dy;
        if (lenSq==0){
            return Math.sqrt(pow(p.x-a.x,2)+pow(p.y-a.y,2));
        }
        double t=((p.x-a.x)*dx+(p.y-a.y)*dy)/lenSq;
        t=Math.max(0,Math.min(1,t));
        double projX=a.x+t*dx;
        double projY=a.y+t*dy;
        return Math.sqrt(pow(p.x-projX,2)+pow(p.y-projY,2));
    }
}
class MyCircle1{
    MyPoint1 point;
    double r;
    MyCircle1(MyPoint1 point,double r){
        this.point=point;
        this.r=r;
    }
    public double getArea(){return 3.14*r*r;}
    public void display(){
        System.out.println("Circle Center:("+point.x+","+point.y+"),radius="+r+",Area="+getArea());
    }
    public boolean intersection(LineSeg1 line){
        if (line.getDistance(point)>r){
            return false;
        }
        return true;
    }
    public void move(double dx,double dy){
        point.x+=dx;
        point.y+=dy;
    }
    public MyPoint1 getCenter(){return point;}
}
3                       组合实现汽车类
public class test3 {
    public static void main(String[] args){
        String wheel="BridgeStone";
        String model="BMW";
        String engine="Mode L";
        Car car1=new Car(model,wheel,engine);
        car1.start();
        System.out.println("=================");
        model="Benz";
        engine="Model S";
        Car car2=new Car(model,wheel,engine);
        car2.changeWheel(2,"Michelin");
        car2.start();
    }
}
class Car{
    private String model;
    private Wheel[] wheels=new Wheel[4];
    private Engine engine;

    public Car(String model,String wheel,String enginetype){
        this.model=model;
        this.engine=new Engine(enginetype);
        for (int i=0;i<4;i++){
            this.wheels[i]=new Wheel(wheel,i+1);
        }
    }
    public void changeWheel(int index,String newwheel){
        if (index>=1&&index<=4){
            this.wheels[index-1]=new Wheel(newwheel,index);
        }
    }
    public void start(){
        System.out.println("Car<"+model+"> is firing!");
        engine.start();
        for (Wheel wheel:this.wheels){
            wheel.roll();
        }
        System.out.println("Car<"+this.model+"> is running");
    }
}
class Engine{
    private String model;
    private String engine;
    public  Engine(String engine){
        this.engine=engine;
    }
    public void start(){
        System.out.println("Engine<"+engine+">  starts!");
    }
}
class Wheel{
    int index;
    String type;
    public Wheel(String type,int index){
        this.index=index;
        this.type=type;
    }
    public void roll(){
        String position="";
        switch (this.index){
            case 1: position="front-left"; break;
            case 2: position="front-right"; break;
            case 3: position="back-left"; break;
            case 4: position="back-right"; break;
        }
        System.out.println("Wheel "+position+" <"+this.type+"> is rolling");
    }
}
4                         线段相交
import static java.lang.Math.*;
public class test4 {
    public static void main(String [] args){
        LineSeg2 line1 = new LineSeg2(new MyPoint2(50,50), new MyPoint2(200,200));
        LineSeg2 line2 = new LineSeg2(new MyPoint2(0,200), new MyPoint2(200, 0));
        LineSeg2 line3 = new LineSeg2(new MyPoint2(150,150), new MyPoint2(200,200));
        line1.display();
        line2.display();
        System.out.println("line1&line2 intersection: "+line1.intersection(line2));
        line2.display();
        line3.display();
        System.out.println("line2&line3 intersection: "+line3.intersection(line2));
    }
}
class MyPoint2{
    double x;
    double y;
    public MyPoint2(double x,double y){
        this.x=x;
        this.y=y;
    }
    public void display(){System.out.println(getInfo());}
    public String getInfo(){return "("+x+","+y+")" ;}
    public void move(double dx,double dy){
        x+=dx;
        y+=dy;
    }
    public double getDistance(MyPoint2 point){
        return Math.sqrt(pow(x-point.x,2)+pow(y-point.y,2));
    }
}
class LineSeg2{
    MyPoint2 p1;
    MyPoint2 p2;
    LineSeg2(MyPoint2 p1,MyPoint2 p2){
        this.p1=p1;
        this.p2=p2;
    }
    public boolean intersection(LineSeg2 line){
        MyPoint2 a=p1;
        MyPoint2 b=p2;
        MyPoint2 c=line.p1;
        MyPoint2 d=line.p2;
        if (Math.max(a.x,b.x)<min(c.x,d.x)||
                Math.max(c.x,d.x)<min(a.x,b.x)||
                Math.max(a.y,b.y)<min(c.y,d.y)||
                Math.max(c.y,d.y)<min(a.y,b.y)){
            return false;
        }
        int cross1=crossProduct(a,b,c);
        int cross2=crossProduct(a,b,d);
        int cross3=crossProduct(c,d,a);
        int cross4=crossProduct(c,d,b);
        return (cross1*cross2<=0)&&(cross3*cross4<=0);
    }
    public int crossProduct(MyPoint2 p1,MyPoint2 p2,MyPoint2 p){
        double cross=(p2.x- p1.x)*(p.y-p1.y)-(p2.y- p1.y)*(p.x-p1.x);
        if (abs(cross)<1e-10) return 0;
        return cross>0?1:-1;
    }
    public void display(){
        System.out.println("("+p1.x+","+p1.y+")---("+p2.x+","+p2.y+")");
    }
    public double getDistance(MyPoint2 p){
        MyPoint2 a=p1;
        MyPoint2 b=p2;
        double dx=b.x-a.x;
        double dy=b.y-a.y;
        double lenSq=dx*dx+dy*dy;
        if (lenSq==0){
            return Math.sqrt(pow(p.x-a.x,2)+pow(p.y-a.y,2));
        }
        double t=((p.x-a.x)*dx+(p.y-a.y)*dy)/lenSq;
        t=Math.max(0,Math.min(1,t));
        double projX=a.x+t*dx;
        double projY=a.y+t*dy;
        return Math.sqrt(pow(p.x-projX,2)+pow(p.y-projY,2));
    }
}1               点类
import java.util.Scanner;
class MyPoint{
    private double x;
    private double y;
    public  MyPoint(double x,double y){
        this.x=x;
        this.y=y;
    }
    public void display(){
        System.out.println("("+x+","+y+")");
    }
    public String getInfo(){
        return "("+x+","+y+")";
    }
}
public class Tesk2 {
    public static void main(String[] args) 	{
        MyPoint point;
        for (int i=0;i<5;i++ ){
            point = new MyPoint(i*10.0,20.0);
            point.display();
        }
    }
}
2             圆类1
import java.io.DataOutput;
import java.util.Scanner;
class MyCircle{
    private double x;
    private double y;
    private double r;
    public MyCircle(double x,double y,double r){
        this.x=x;
        this.y=y;
        this.r=r;
    }
    public double getArea(){
        return 3.14*r*r;
    }
    public void display(){
        double area=getArea();
        System.out.printf("Circle Center:(%.1f,%.1f),radius=%.1f,Area=%.1f\n",x,y,r,area);
    }
}
public class Circle0 {
    public static void main(String[] args) {
        MyCircle circle;
        for (int i=0;i<5;i++ ){
            circle = new MyCircle(10.0,20.0,(i+1)*10);
            circle.display();
        }
    }
}
3                 圆类2
public class Circle1 {
    public static void main(String[] args) {
        MyCircle0 circle;
        MyPoint0 point;
        point = new MyPoint0(10.0, 20.0);
        for (int i = 0; i < 5; i++) {
            circle = new MyCircle0(point, (i + 1) * 10);
            circle.display();
        }
    }
}
class MyPoint0{
    private double x;
    private double y;
    public MyPoint0(double x, double y) {
        this.x = x;
        this.y = y;
    }
    public double getX() {
        return x;
    }
    public double getY() {
        return y;
    }
}
class MyCircle0{
    private MyPoint0 center;  
    private double radius;
    public MyCircle0(MyPoint0 center, double radius) {
        this.center = center;  
        this.radius = radius;
    }
    public double getArea() {
        return 3.14 * radius * radius;
    }
    public void display() {
         System.out.printf("Circle Center:(%.1f,%.1f),radius=%.1f,Area=%.1f%n",
                center.getX(), center.getY(), radius, getArea());
    }
}

4                      同心圆
public class Test3{
    public static void main(String[] args) {
        int size = 5;
        double[] radius = {10.0,5.0,7.0,9.0,15.0};
        MyPoint1 point;
        point = new MyPoint1(10.0,20.0);
        for (int i=0;i<size;i++ ){
            System.out.println("radius "+i+": "+radius[i]);
        }
        ConcentricCircles cc = new ConcentricCircles(size, point);
        cc.createCircles(radius);
        cc.sort();
        cc.display();
    }
}
class MyPoint1{
    private double x;
    private double y;
    public MyPoint1(double x, double y) {
        this.x = x;
        this.y = y;
    }
    public double getX() {
        return x;
    }
    public double getY() {
        return y;
    }
}
class MyCircle1{
    private MyPoint1 center;
    private double radius;
    public MyCircle1(MyPoint1 center, double radius) {
        this.center = center; 
        this.radius = radius;
    }
    public double getArea() {
        return 3.14 * radius * radius;
    }
    public void display() {
           System.out.println("Circle Center:("+center.getX()+","+center.getY()+"),radius="+radius+","+"Area="+getArea());
    }
}
class ConcentricCircles{
    private MyPoint1 center;
    private MyCircle1[] circle;
    private int size;
    public ConcentricCircles(int size,MyPoint1 center){
        this.size=size;
        this.center=center;
        this.circle=new MyCircle1[size];
    public void createCircles(double[] r){
        for (int i=0;i<size;i++){
            circle[i]=new MyCircle1(center,r[i]);
        }
    }
    public void sort(){
        for (int i=0;i<size-1;i++)
            for (int j=0;j<size-i-1;j++)
            {
                if (circle[j].getArea()>circle[j+1].getArea())
                {
                    MyCircle1 t=circle[j];
                    circle[j]=circle[j+1];
                    circle[j+1]=t;
                }
            }
    }
    public void display(){
        for (int i=0; i<size;i++){
            circle[i].display();
        }
    }
}

1                    接受整数的分类
import java.util.Scanner;
class IntReceiver {
    final int max=100;
    final int min=0;
    public int getValue(){
        Scanner sc=new Scanner(System.in);
        int i;
        while (true){
            System.out.print("input an integer:");
            i=sc.nextInt();
            if (i>min&&i<100){
                return i;
            }
            else
                System.out.println("invalid input!");
        }
    }
}
public class Test {
    public static void main(String[] args) {
        IntReceiver ir = new IntReceiver();
        int value;
        value = ir.getValue();
        System.out.println("The value is "+value);
    }
}
2                  时间类
class MyTime{
    int hour;
    int minute;
    public void showTime(){
        if (hour==0||minute==0)
            System.out.println("Time is 0:0");
        else
            System.out.println("Time is "+this.hour+":"+this.minute);
    }
    public void setTime(int hour1,int minute1){
        if ((hour1>=0&&hour1<=23)&&(minute1>=0&&minute1<60)){
            this.hour=hour1;
            this.minute=minute1;
        }
        else {
           System.out.print("invalid time value! ");
        }
    }
    public String getTime12(){
        int hour2=hour;
        if (hour2>12){
            hour2=hour2-12;
            return hour2+":"+minute+" pm";
        }
        else
            return hour2+":"+minute+" am";
    }
    public MyTime(int hour,int minute){
        if ((hour>=0&&hour<24)&&(minute>=0&&minute<60)){
            this.hour=hour;
            this.minute=minute;
        }
        else{
            this.hour=0;
            this.minute=0;
            System.out.print("invalid time value! ");
        }
    }
}
public class Test1 {
    static public void main(String args[]){
        MyTime mt = new MyTime(25,43);
        mt.showTime();
        mt = new MyTime(10,35);
        mt.showTime();
        System.out.println("Time in 12---"+mt.getTime12());
        mt.setTime(25,16);
        mt.showTime();
        mt.setTime(23,18);
        mt.showTime();
        System.out.println("Time in 12---"+mt.getTime12());
    }
}
3                     温度转换类
public class test2{
    static public void main(String args[]){
        Temperature t1 = new Temperature(0,'C');
        Temperature t2 = new Temperature(30,'F');
        Temperature t3 = new Temperature(-40,'C');
        Temperature t4 = new Temperature(-40,'F');
        Temperature t5 = new Temperature(98,'C');
        Temperature t6 = new Temperature(212,'F');
        String comStr;
        int comInt;
        System.out.println("t1: "+t1.toString());
        System.out.println("t2: "+t2.toString());
        comStr = t1.compareTo(t2);
        System.out.println("t1 is "+comStr+" t2");
        System.out.println("-");
        System.out.println("t3 in F is : "+t3.getF());
        comStr = t3.compareTo(t4);
        System.out.println("t3 is "+comStr+" t4");
        System.out.println("-");
        System.out.println("t6 in C is : "+t6.getC());
        comStr = t5.compareTo(t6);
        System.out.println("t5 is "+comStr+" t6");
    }
}
class Temperature{
    double temp;
    char unit;
    public Temperature(double temp,char unit){
        this.unit=unit;
        this.temp=temp;
    }
    public double getC(){
        return (temp-32)*5/9.0;
    }
    public double getF(){
        return temp*1.8+32.0;
    }
    public String toString(){
        if(unit=='C'){
            String formatted = String.format("%.1f", temp);
            return "Temperature is "+formatted+unit;
        }
        else{
            String formatted = String.format("%.1f", temp);
            return "Temperature is "+formatted+unit;
        }
    }
    public String compareTo(Temperature other){
        double other_temp;
        if(unit=='C'){
            other_temp=(other.temp-32)*5/9.0;
            if(temp>other_temp){
                return " greater than ";
            } else if (temp==other_temp) {
                return " equals to ";
            }else {
                return " less than ";
            }
        }else{
            other_temp=other.temp*1.8+32.0;
            if(temp>other_temp){
                return " greater than ";
            } else if (temp==other_temp) {
                return " equals to ";
            }else {
                return " less than ";
            }
        }
    }
}

